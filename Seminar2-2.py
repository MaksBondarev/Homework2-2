# №9 По данноу целому не отрицательному n вычесоите значение n!. N! = 1*2*3///... *N(протзведенных всех чисел от 1 до N) 0! = 1. В решение задачи используйти цикл while
# input: 5
# output: 120

# Решение:

# number = int(input("Введите число: "))
# fact = 1
# summ = 1
# while(fact <= number):
#     summ = summ * fact
#     print(f'{summ}')
#     fact += 1
# print('\n')
# print(f'Произведение чисел: {summ}')


# №11 Дано натуральное число A > 1. Определите, какие по счету числом фибоначи оно являеться, то есть выведите такое число n, что фибо(n) = A не являеться числом фибоначи, выведите число -1
# input: 5
# output: 6

# Решение:


# A = int(input("Введите число A: "))
# if A < 2:
#     print('Порядковый номер:', A)
# else:
#     a = 0
#     b = 1
#     number = 2
#     c = a + b
#     flag = 1
#     while c <= A:
#         if c == A:
#             print('Порядковый номер:', number)
#             flag = 0
#             break
#         a = b
#         b = c
#         c = a + b
#         number += 1
#     if flag:
#         print(f'({A}) -> не являеться числом фибоначи')


# №15 Пользователь вводит одно число N - количество арбузов. Вторая строка содержит N чисел, записанных на новой строчки каждое. Здесь каждое число - это масса соответствующего арбуза
# Поиск Минимум и Максимум без встроенных функций
# input: 5 -> 51659
# Output: 19

# Решение:

# a = int(input('Введите количество Арбузов: '))  
# maxi = 0
# mini = 10**100

# for i in range(a):
#     b = int(input('Введите вес Арбуза: '))
#     if b > maxi:
#         maxi = b
#     if b < mini:
#         mini = b          
# print('Самый тяжелый Арбуз:',maxi)  
# print('Самый легкий Арбуз:',mini) 



# мы задаем какого размера должен быть списк пото задаем цмфры в списк и спомощи функции append наполняем наш списк а после с помошью функции max выводит на экран максимальное и минимальное число
a = int(input('Введите количество чисел: ')) 
list = []
for i in range(a):
    b = int(input('Введите число: ')) 
    if b > 0:
     list.append(b)
c = max(list)
print(c)
   
   

        

    





